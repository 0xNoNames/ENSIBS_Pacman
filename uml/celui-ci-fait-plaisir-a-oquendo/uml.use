model Pacman

-- enumerations

enum StatutPartie {enCours, enPause, terminee}
enum Direction {nord, sud, est, ouest}
enum Couleur {rouge, rose, cyan, orange}
enum StatutFantome {chasseur, vulnerable, mort}

-- classes

class Score
attributes
  joueur: String
  score: Integer
end

class Partie
attributes
  player: String
  scoreActuel: Integer
  niveau: Integer
  tempsNiveau: Integer
  statutPartie: StatutPartie
operations
  jeu()
end

class Grille
attributes
  largeur: Integer
  longueur: Integer
end

abstract class Case
attributes
  x: Integer
  y: Integer
end

class Mur < Case
end

class Jouable < Case
end

abstract class Objet
operations
  getPoints(): Integer
end

class PetiteGomme < Objet
attributes
  points: Integer
    init: 10
operations
  getPoints(): Integer
end

class GrosseGomme < Objet
attributes
  points: Integer
    init: 50
operations
  getPoints(): Integer
end

abstract class Fruit < Objet
end

class Cerise < Fruit
attributes
  points: Integer
    init: 100
operations
  getPoints(): Integer
end

class Fraise < Fruit
attributes
  points: Integer
    init: 300
operations
  getPoints(): Integer
end

class Orange < Fruit
attributes
  points: Integer
    init: 500
operations
  getPoints(): Integer
end

class Pomme < Fruit
attributes
  points: Integer
    init: 700
operations
  getPoints(): Integer
end

class Melon < Fruit
attributes
  points: Integer
    init: 1000
operations
  getPoints(): Integer
end

class GalaxianBoss < Fruit
attributes
  points: Integer
    init: 2000
operations
  getPoints(): Integer
end

class Cloche < Fruit
attributes
  points: Integer
    init: 3000
operations
  getPoints(): Integer
end

class Cle < Fruit
attributes
  points: Integer
    init: 5000
operations
  getPoints(): Integer
end

abstract class Entite
attributes
  posX: Integer
  posY: Integer
operations
  meurt()
end

class PacMan < Entite
attributes
  vies: Integer
  directionCourante: Direction
  directionVoulue: Direction
operations
  setDirectionVoulue(direction: Direction)
  deplacer()
  meurt()
--  begin
--	  if self.vies > 1 then self.vies := self.vies - 1
--	  else self.vies := 0;
--         self.grillePacMan.partie.statutPartie := #terminee;
--    end
--	end
end

abstract class Fantome < Entite
attributes
  couleur: Couleur
  statut: StatutFantome
operations
  setStatut(statut: StatutFantome)
  begin
    self.statut := statut;
  end
  meurt()
  begin
    self.statut := #mort;
  end
  deplacer(x : Integer, y : Integer)
end

class Blinky < Fantome
end

class Pinky < Fantome
end

class Inky < Fantome
end

class Clyde < Fantome
end

-- associations

composition enCours between
  Partie[1] role partie
  Grille[1] role grilleEnCours
end

composition estSur between
  Jouable[1] role case
  Entite[0..5] role entite_presente
end

composition contient between
  Jouable[0..1] role caseContient
  Objet[1] role objet
end

composition compose between
  Grille[1] role grille -- 28 en largeur, 31 en hauteur
  Case[4..868] role caseCompose
end

aggregation scores between
  Partie[*] role partieScores
  Score[1] role scores
end

constraints

-- invariants
context Partie
inv NombreNiveaux: self.niveau >=0 and self.niveau <= 256

context Case
inv CaseCoordsDifferentes: Case.allInstances->forAll(c1, c2 | c1.x <> c2.x and c1.y <> c2.y)

context Case
inv CaseDedans : Case.allInstances->forAll(c1 | c1.y <= c1.grille.longueur and c1.x <= c1.grille.largeur)

context Grille
inv BonNombreCase : caseCompose -> size() = longueur * largeur

-- pre/post conditions

context PetiteGomme::getPoints():Integer
post ValuePoints : result = self.points

context GrosseGomme::getPoints():Integer
post ValuePoints : result = self.points

context Cerise::getPoints():Integer
post ValuePoints : result = self.points

context Fraise::getPoints():Integer
post ValuePoints : result = self.points

context Orange::getPoints():Integer
post ValuePoints : result = self.points

context Pomme::getPoints():Integer
post ValuePoints : result = self.points

context Melon::getPoints():Integer
post ValuePoints : result = self.points

context GalaxianBoss::getPoints():Integer
post ValuePoints : result = self.points

context Cloche::getPoints():Integer
post ValuePoints : result = self.points

context Cle::getPoints():Integer
post ValuePoints : result = self.points

context Partie::jeu()
pre TempsPossible : self.tempsNiveau > 0
pre StatutDepart : self.statutPartie = #enPause
post TempsValide : self.tempsNiveau = 0
post BonStatut : self.statutPartie = #terminee

context Fantome::meurt()
pre PreMortemFantome: self.statut = #vulnerable
post PostMortemFantome: self.statut = #mort

context Fantome::setStatut(statut: StatutFantome)
post SetStatutFantome: self.statut = statut


context Fantom::deplacer(dx : Integer, dy : Integer)
post 

context PacMan::meurt()
pre PreMortemPacMan: self.vies >= 1
post PostMortemPacMan: self.vies = self.vies@pre - 1

context PacMan::setDirectionVoulue(direction: Direction)
post SetDirectionVoulue: self.directionVoulue = direction
